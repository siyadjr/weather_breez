// Mocks generated by Mockito 5.4.4 from annotations
// in weatherbreez/test/unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i3;

import 'package:flutter/cupertino.dart' as _i4;
import 'package:flutter_localization/flutter_localization.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FlutterLocalization].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalization extends _i1.Mock
    implements _i2.FlutterLocalization {
  MockFlutterLocalization() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onTranslatedLanguage(_i2.TranslatorCallback? _onTranslatedLanguage) =>
      super.noSuchMethod(
        Invocation.setter(
          #onTranslatedLanguage,
          _onTranslatedLanguage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String> get supportedLanguageCodes => (super.noSuchMethod(
        Invocation.getter(#supportedLanguageCodes),
        returnValue: <String>[],
      ) as List<String>);

  @override
  Iterable<_i3.Locale> get supportedLocales => (super.noSuchMethod(
        Invocation.getter(#supportedLocales),
        returnValue: <_i3.Locale>[],
      ) as Iterable<_i3.Locale>);

  @override
  Iterable<_i4.LocalizationsDelegate<dynamic>> get localizationsDelegates =>
      (super.noSuchMethod(
        Invocation.getter(#localizationsDelegates),
        returnValue: <_i4.LocalizationsDelegate<dynamic>>[],
      ) as Iterable<_i4.LocalizationsDelegate<dynamic>>);

  @override
  _i5.Future<void> ensureInitialized() => (super.noSuchMethod(
        Invocation.method(
          #ensureInitialized,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void init({
    required List<_i2.MapLocale>? mapLocales,
    required String? initLanguageCode,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #init,
          [],
          {
            #mapLocales: mapLocales,
            #initLanguageCode: initLanguageCode,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void translate(
    String? languageCode, {
    bool? save = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #translate,
          [languageCode],
          {#save: save},
        ),
        returnValueForMissingStub: null,
      );

  @override
  String getLanguageName({String? languageCode}) => (super.noSuchMethod(
        Invocation.method(
          #getLanguageName,
          [],
          {#languageCode: languageCode},
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #getLanguageName,
            [],
            {#languageCode: languageCode},
          ),
        ),
      ) as String);
}
